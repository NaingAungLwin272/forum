// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: userBadge.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserBadgeService_CreateUserBadge_FullMethodName     = "/pb.UserBadgeService/CreateUserBadge"
	UserBadgeService_GetUserBadge_FullMethodName        = "/pb.UserBadgeService/GetUserBadge"
	UserBadgeService_GetUserBadges_FullMethodName       = "/pb.UserBadgeService/GetUserBadges"
	UserBadgeService_GetUserBadgesOfUser_FullMethodName = "/pb.UserBadgeService/GetUserBadgesOfUser"
	UserBadgeService_UpdateUserBadge_FullMethodName     = "/pb.UserBadgeService/UpdateUserBadge"
	UserBadgeService_DeleteUserBadge_FullMethodName     = "/pb.UserBadgeService/DeleteUserBadge"
	UserBadgeService_GetBadgeCount_FullMethodName       = "/pb.UserBadgeService/GetBadgeCount"
)

// UserBadgeServiceClient is the client API for UserBadgeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserBadgeServiceClient interface {
	CreateUserBadge(ctx context.Context, in *CreateUserBadgeRequest, opts ...grpc.CallOption) (*UserBadgeResponse, error)
	GetUserBadge(ctx context.Context, in *UserBadgeRequest, opts ...grpc.CallOption) (*UserBadgeResponse, error)
	GetUserBadges(ctx context.Context, in *GetUserBadgesRequest, opts ...grpc.CallOption) (*UserBadgeResponseList, error)
	GetUserBadgesOfUser(ctx context.Context, in *GetUserBadgesOfUserRequest, opts ...grpc.CallOption) (*UserBadgeResponseList, error)
	UpdateUserBadge(ctx context.Context, in *UpdateUserBadgeRequest, opts ...grpc.CallOption) (*UserBadgeResponse, error)
	DeleteUserBadge(ctx context.Context, in *UserBadgeRequest, opts ...grpc.CallOption) (*DeleteUserBadgeResponse, error)
	GetBadgeCount(ctx context.Context, in *BadgeRequestByUserId, opts ...grpc.CallOption) (*BadgeCountResponse, error)
}

type userBadgeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserBadgeServiceClient(cc grpc.ClientConnInterface) UserBadgeServiceClient {
	return &userBadgeServiceClient{cc}
}

func (c *userBadgeServiceClient) CreateUserBadge(ctx context.Context, in *CreateUserBadgeRequest, opts ...grpc.CallOption) (*UserBadgeResponse, error) {
	out := new(UserBadgeResponse)
	err := c.cc.Invoke(ctx, UserBadgeService_CreateUserBadge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userBadgeServiceClient) GetUserBadge(ctx context.Context, in *UserBadgeRequest, opts ...grpc.CallOption) (*UserBadgeResponse, error) {
	out := new(UserBadgeResponse)
	err := c.cc.Invoke(ctx, UserBadgeService_GetUserBadge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userBadgeServiceClient) GetUserBadges(ctx context.Context, in *GetUserBadgesRequest, opts ...grpc.CallOption) (*UserBadgeResponseList, error) {
	out := new(UserBadgeResponseList)
	err := c.cc.Invoke(ctx, UserBadgeService_GetUserBadges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userBadgeServiceClient) GetUserBadgesOfUser(ctx context.Context, in *GetUserBadgesOfUserRequest, opts ...grpc.CallOption) (*UserBadgeResponseList, error) {
	out := new(UserBadgeResponseList)
	err := c.cc.Invoke(ctx, UserBadgeService_GetUserBadgesOfUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userBadgeServiceClient) UpdateUserBadge(ctx context.Context, in *UpdateUserBadgeRequest, opts ...grpc.CallOption) (*UserBadgeResponse, error) {
	out := new(UserBadgeResponse)
	err := c.cc.Invoke(ctx, UserBadgeService_UpdateUserBadge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userBadgeServiceClient) DeleteUserBadge(ctx context.Context, in *UserBadgeRequest, opts ...grpc.CallOption) (*DeleteUserBadgeResponse, error) {
	out := new(DeleteUserBadgeResponse)
	err := c.cc.Invoke(ctx, UserBadgeService_DeleteUserBadge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userBadgeServiceClient) GetBadgeCount(ctx context.Context, in *BadgeRequestByUserId, opts ...grpc.CallOption) (*BadgeCountResponse, error) {
	out := new(BadgeCountResponse)
	err := c.cc.Invoke(ctx, UserBadgeService_GetBadgeCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserBadgeServiceServer is the server API for UserBadgeService service.
// All implementations must embed UnimplementedUserBadgeServiceServer
// for forward compatibility
type UserBadgeServiceServer interface {
	CreateUserBadge(context.Context, *CreateUserBadgeRequest) (*UserBadgeResponse, error)
	GetUserBadge(context.Context, *UserBadgeRequest) (*UserBadgeResponse, error)
	GetUserBadges(context.Context, *GetUserBadgesRequest) (*UserBadgeResponseList, error)
	GetUserBadgesOfUser(context.Context, *GetUserBadgesOfUserRequest) (*UserBadgeResponseList, error)
	UpdateUserBadge(context.Context, *UpdateUserBadgeRequest) (*UserBadgeResponse, error)
	DeleteUserBadge(context.Context, *UserBadgeRequest) (*DeleteUserBadgeResponse, error)
	GetBadgeCount(context.Context, *BadgeRequestByUserId) (*BadgeCountResponse, error)
	mustEmbedUnimplementedUserBadgeServiceServer()
}

// UnimplementedUserBadgeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserBadgeServiceServer struct {
}

func (UnimplementedUserBadgeServiceServer) CreateUserBadge(context.Context, *CreateUserBadgeRequest) (*UserBadgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserBadge not implemented")
}
func (UnimplementedUserBadgeServiceServer) GetUserBadge(context.Context, *UserBadgeRequest) (*UserBadgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBadge not implemented")
}
func (UnimplementedUserBadgeServiceServer) GetUserBadges(context.Context, *GetUserBadgesRequest) (*UserBadgeResponseList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBadges not implemented")
}
func (UnimplementedUserBadgeServiceServer) GetUserBadgesOfUser(context.Context, *GetUserBadgesOfUserRequest) (*UserBadgeResponseList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBadgesOfUser not implemented")
}
func (UnimplementedUserBadgeServiceServer) UpdateUserBadge(context.Context, *UpdateUserBadgeRequest) (*UserBadgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserBadge not implemented")
}
func (UnimplementedUserBadgeServiceServer) DeleteUserBadge(context.Context, *UserBadgeRequest) (*DeleteUserBadgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserBadge not implemented")
}
func (UnimplementedUserBadgeServiceServer) GetBadgeCount(context.Context, *BadgeRequestByUserId) (*BadgeCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBadgeCount not implemented")
}
func (UnimplementedUserBadgeServiceServer) mustEmbedUnimplementedUserBadgeServiceServer() {}

// UnsafeUserBadgeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserBadgeServiceServer will
// result in compilation errors.
type UnsafeUserBadgeServiceServer interface {
	mustEmbedUnimplementedUserBadgeServiceServer()
}

func RegisterUserBadgeServiceServer(s grpc.ServiceRegistrar, srv UserBadgeServiceServer) {
	s.RegisterService(&UserBadgeService_ServiceDesc, srv)
}

func _UserBadgeService_CreateUserBadge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserBadgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserBadgeServiceServer).CreateUserBadge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserBadgeService_CreateUserBadge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserBadgeServiceServer).CreateUserBadge(ctx, req.(*CreateUserBadgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserBadgeService_GetUserBadge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBadgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserBadgeServiceServer).GetUserBadge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserBadgeService_GetUserBadge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserBadgeServiceServer).GetUserBadge(ctx, req.(*UserBadgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserBadgeService_GetUserBadges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBadgesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserBadgeServiceServer).GetUserBadges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserBadgeService_GetUserBadges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserBadgeServiceServer).GetUserBadges(ctx, req.(*GetUserBadgesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserBadgeService_GetUserBadgesOfUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBadgesOfUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserBadgeServiceServer).GetUserBadgesOfUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserBadgeService_GetUserBadgesOfUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserBadgeServiceServer).GetUserBadgesOfUser(ctx, req.(*GetUserBadgesOfUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserBadgeService_UpdateUserBadge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserBadgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserBadgeServiceServer).UpdateUserBadge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserBadgeService_UpdateUserBadge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserBadgeServiceServer).UpdateUserBadge(ctx, req.(*UpdateUserBadgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserBadgeService_DeleteUserBadge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBadgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserBadgeServiceServer).DeleteUserBadge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserBadgeService_DeleteUserBadge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserBadgeServiceServer).DeleteUserBadge(ctx, req.(*UserBadgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserBadgeService_GetBadgeCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BadgeRequestByUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserBadgeServiceServer).GetBadgeCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserBadgeService_GetBadgeCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserBadgeServiceServer).GetBadgeCount(ctx, req.(*BadgeRequestByUserId))
	}
	return interceptor(ctx, in, info, handler)
}

// UserBadgeService_ServiceDesc is the grpc.ServiceDesc for UserBadgeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserBadgeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.UserBadgeService",
	HandlerType: (*UserBadgeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserBadge",
			Handler:    _UserBadgeService_CreateUserBadge_Handler,
		},
		{
			MethodName: "GetUserBadge",
			Handler:    _UserBadgeService_GetUserBadge_Handler,
		},
		{
			MethodName: "GetUserBadges",
			Handler:    _UserBadgeService_GetUserBadges_Handler,
		},
		{
			MethodName: "GetUserBadgesOfUser",
			Handler:    _UserBadgeService_GetUserBadgesOfUser_Handler,
		},
		{
			MethodName: "UpdateUserBadge",
			Handler:    _UserBadgeService_UpdateUserBadge_Handler,
		},
		{
			MethodName: "DeleteUserBadge",
			Handler:    _UserBadgeService_DeleteUserBadge_Handler,
		},
		{
			MethodName: "GetBadgeCount",
			Handler:    _UserBadgeService_GetBadgeCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userBadge.proto",
}
