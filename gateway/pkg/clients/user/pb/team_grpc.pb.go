// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: team.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TeamService_CreateTeam_FullMethodName           = "/pb.TeamService/CreateTeam"
	TeamService_GetTeam_FullMethodName              = "/pb.TeamService/GetTeam"
	TeamService_GetTeams_FullMethodName             = "/pb.TeamService/GetTeams"
	TeamService_UpdateTeam_FullMethodName           = "/pb.TeamService/UpdateTeam"
	TeamService_DeleteTeam_FullMethodName           = "/pb.TeamService/DeleteTeam"
	TeamService_GetTeamByDeparmentId_FullMethodName = "/pb.TeamService/GetTeamByDeparmentId"
	TeamService_GetTeamCount_FullMethodName         = "/pb.TeamService/GetTeamCount"
)

// TeamServiceClient is the client API for TeamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeamServiceClient interface {
	CreateTeam(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*TeamResponse, error)
	GetTeam(ctx context.Context, in *TeamRequest, opts ...grpc.CallOption) (*TeamResponse, error)
	GetTeams(ctx context.Context, in *GetTeamsRequest, opts ...grpc.CallOption) (TeamService_GetTeamsClient, error)
	UpdateTeam(ctx context.Context, in *TeamUpdateRequest, opts ...grpc.CallOption) (*TeamResponse, error)
	DeleteTeam(ctx context.Context, in *TeamRequest, opts ...grpc.CallOption) (*DeleteTeamResponse, error)
	GetTeamByDeparmentId(ctx context.Context, in *TeamRequestByDeparmentId, opts ...grpc.CallOption) (TeamService_GetTeamByDeparmentIdClient, error)
	GetTeamCount(ctx context.Context, in *GetTeamsRequest, opts ...grpc.CallOption) (*TeamCountResponse, error)
}

type teamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTeamServiceClient(cc grpc.ClientConnInterface) TeamServiceClient {
	return &teamServiceClient{cc}
}

func (c *teamServiceClient) CreateTeam(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*TeamResponse, error) {
	out := new(TeamResponse)
	err := c.cc.Invoke(ctx, TeamService_CreateTeam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) GetTeam(ctx context.Context, in *TeamRequest, opts ...grpc.CallOption) (*TeamResponse, error) {
	out := new(TeamResponse)
	err := c.cc.Invoke(ctx, TeamService_GetTeam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) GetTeams(ctx context.Context, in *GetTeamsRequest, opts ...grpc.CallOption) (TeamService_GetTeamsClient, error) {
	stream, err := c.cc.NewStream(ctx, &TeamService_ServiceDesc.Streams[0], TeamService_GetTeams_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &teamServiceGetTeamsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TeamService_GetTeamsClient interface {
	Recv() (*Team, error)
	grpc.ClientStream
}

type teamServiceGetTeamsClient struct {
	grpc.ClientStream
}

func (x *teamServiceGetTeamsClient) Recv() (*Team, error) {
	m := new(Team)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *teamServiceClient) UpdateTeam(ctx context.Context, in *TeamUpdateRequest, opts ...grpc.CallOption) (*TeamResponse, error) {
	out := new(TeamResponse)
	err := c.cc.Invoke(ctx, TeamService_UpdateTeam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) DeleteTeam(ctx context.Context, in *TeamRequest, opts ...grpc.CallOption) (*DeleteTeamResponse, error) {
	out := new(DeleteTeamResponse)
	err := c.cc.Invoke(ctx, TeamService_DeleteTeam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) GetTeamByDeparmentId(ctx context.Context, in *TeamRequestByDeparmentId, opts ...grpc.CallOption) (TeamService_GetTeamByDeparmentIdClient, error) {
	stream, err := c.cc.NewStream(ctx, &TeamService_ServiceDesc.Streams[1], TeamService_GetTeamByDeparmentId_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &teamServiceGetTeamByDeparmentIdClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TeamService_GetTeamByDeparmentIdClient interface {
	Recv() (*Team, error)
	grpc.ClientStream
}

type teamServiceGetTeamByDeparmentIdClient struct {
	grpc.ClientStream
}

func (x *teamServiceGetTeamByDeparmentIdClient) Recv() (*Team, error) {
	m := new(Team)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *teamServiceClient) GetTeamCount(ctx context.Context, in *GetTeamsRequest, opts ...grpc.CallOption) (*TeamCountResponse, error) {
	out := new(TeamCountResponse)
	err := c.cc.Invoke(ctx, TeamService_GetTeamCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeamServiceServer is the server API for TeamService service.
// All implementations must embed UnimplementedTeamServiceServer
// for forward compatibility
type TeamServiceServer interface {
	CreateTeam(context.Context, *CreateTeamRequest) (*TeamResponse, error)
	GetTeam(context.Context, *TeamRequest) (*TeamResponse, error)
	GetTeams(*GetTeamsRequest, TeamService_GetTeamsServer) error
	UpdateTeam(context.Context, *TeamUpdateRequest) (*TeamResponse, error)
	DeleteTeam(context.Context, *TeamRequest) (*DeleteTeamResponse, error)
	GetTeamByDeparmentId(*TeamRequestByDeparmentId, TeamService_GetTeamByDeparmentIdServer) error
	GetTeamCount(context.Context, *GetTeamsRequest) (*TeamCountResponse, error)
	mustEmbedUnimplementedTeamServiceServer()
}

// UnimplementedTeamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTeamServiceServer struct {
}

func (UnimplementedTeamServiceServer) CreateTeam(context.Context, *CreateTeamRequest) (*TeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeam not implemented")
}
func (UnimplementedTeamServiceServer) GetTeam(context.Context, *TeamRequest) (*TeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeam not implemented")
}
func (UnimplementedTeamServiceServer) GetTeams(*GetTeamsRequest, TeamService_GetTeamsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTeams not implemented")
}
func (UnimplementedTeamServiceServer) UpdateTeam(context.Context, *TeamUpdateRequest) (*TeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeam not implemented")
}
func (UnimplementedTeamServiceServer) DeleteTeam(context.Context, *TeamRequest) (*DeleteTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeam not implemented")
}
func (UnimplementedTeamServiceServer) GetTeamByDeparmentId(*TeamRequestByDeparmentId, TeamService_GetTeamByDeparmentIdServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTeamByDeparmentId not implemented")
}
func (UnimplementedTeamServiceServer) GetTeamCount(context.Context, *GetTeamsRequest) (*TeamCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamCount not implemented")
}
func (UnimplementedTeamServiceServer) mustEmbedUnimplementedTeamServiceServer() {}

// UnsafeTeamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeamServiceServer will
// result in compilation errors.
type UnsafeTeamServiceServer interface {
	mustEmbedUnimplementedTeamServiceServer()
}

func RegisterTeamServiceServer(s grpc.ServiceRegistrar, srv TeamServiceServer) {
	s.RegisterService(&TeamService_ServiceDesc, srv)
}

func _TeamService_CreateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).CreateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamService_CreateTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).CreateTeam(ctx, req.(*CreateTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_GetTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).GetTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamService_GetTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).GetTeam(ctx, req.(*TeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_GetTeams_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTeamsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TeamServiceServer).GetTeams(m, &teamServiceGetTeamsServer{stream})
}

type TeamService_GetTeamsServer interface {
	Send(*Team) error
	grpc.ServerStream
}

type teamServiceGetTeamsServer struct {
	grpc.ServerStream
}

func (x *teamServiceGetTeamsServer) Send(m *Team) error {
	return x.ServerStream.SendMsg(m)
}

func _TeamService_UpdateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).UpdateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamService_UpdateTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).UpdateTeam(ctx, req.(*TeamUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_DeleteTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).DeleteTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamService_DeleteTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).DeleteTeam(ctx, req.(*TeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_GetTeamByDeparmentId_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TeamRequestByDeparmentId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TeamServiceServer).GetTeamByDeparmentId(m, &teamServiceGetTeamByDeparmentIdServer{stream})
}

type TeamService_GetTeamByDeparmentIdServer interface {
	Send(*Team) error
	grpc.ServerStream
}

type teamServiceGetTeamByDeparmentIdServer struct {
	grpc.ServerStream
}

func (x *teamServiceGetTeamByDeparmentIdServer) Send(m *Team) error {
	return x.ServerStream.SendMsg(m)
}

func _TeamService_GetTeamCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).GetTeamCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamService_GetTeamCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).GetTeamCount(ctx, req.(*GetTeamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TeamService_ServiceDesc is the grpc.ServiceDesc for TeamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TeamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TeamService",
	HandlerType: (*TeamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTeam",
			Handler:    _TeamService_CreateTeam_Handler,
		},
		{
			MethodName: "GetTeam",
			Handler:    _TeamService_GetTeam_Handler,
		},
		{
			MethodName: "UpdateTeam",
			Handler:    _TeamService_UpdateTeam_Handler,
		},
		{
			MethodName: "DeleteTeam",
			Handler:    _TeamService_DeleteTeam_Handler,
		},
		{
			MethodName: "GetTeamCount",
			Handler:    _TeamService_GetTeamCount_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTeams",
			Handler:       _TeamService_GetTeams_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTeamByDeparmentId",
			Handler:       _TeamService_GetTeamByDeparmentId_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "team.proto",
}
