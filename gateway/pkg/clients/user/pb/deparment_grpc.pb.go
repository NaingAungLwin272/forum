// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: deparment.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DeparmentService_CreateDeparment_FullMethodName    = "/pb.DeparmentService/CreateDeparment"
	DeparmentService_GetDeparment_FullMethodName       = "/pb.DeparmentService/GetDeparment"
	DeparmentService_GetDeparments_FullMethodName      = "/pb.DeparmentService/GetDeparments"
	DeparmentService_UpdateDeparment_FullMethodName    = "/pb.DeparmentService/UpdateDeparment"
	DeparmentService_DeleteDeparment_FullMethodName    = "/pb.DeparmentService/DeleteDeparment"
	DeparmentService_GetDepartmentCount_FullMethodName = "/pb.DeparmentService/GetDepartmentCount"
)

// DeparmentServiceClient is the client API for DeparmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeparmentServiceClient interface {
	CreateDeparment(ctx context.Context, in *CreateDeparmentRequest, opts ...grpc.CallOption) (*DeparmentResponse, error)
	GetDeparment(ctx context.Context, in *DeparmentRequest, opts ...grpc.CallOption) (*DeparmentResponse, error)
	GetDeparments(ctx context.Context, in *GetDeparmentsRequest, opts ...grpc.CallOption) (DeparmentService_GetDeparmentsClient, error)
	UpdateDeparment(ctx context.Context, in *DeparmentUpdateRequest, opts ...grpc.CallOption) (*DeparmentResponse, error)
	DeleteDeparment(ctx context.Context, in *DeparmentRequest, opts ...grpc.CallOption) (*DeleteDeparmentResponse, error)
	GetDepartmentCount(ctx context.Context, in *GetDeparmentsRequest, opts ...grpc.CallOption) (*DepartmentCountResponse, error)
}

type deparmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeparmentServiceClient(cc grpc.ClientConnInterface) DeparmentServiceClient {
	return &deparmentServiceClient{cc}
}

func (c *deparmentServiceClient) CreateDeparment(ctx context.Context, in *CreateDeparmentRequest, opts ...grpc.CallOption) (*DeparmentResponse, error) {
	out := new(DeparmentResponse)
	err := c.cc.Invoke(ctx, DeparmentService_CreateDeparment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deparmentServiceClient) GetDeparment(ctx context.Context, in *DeparmentRequest, opts ...grpc.CallOption) (*DeparmentResponse, error) {
	out := new(DeparmentResponse)
	err := c.cc.Invoke(ctx, DeparmentService_GetDeparment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deparmentServiceClient) GetDeparments(ctx context.Context, in *GetDeparmentsRequest, opts ...grpc.CallOption) (DeparmentService_GetDeparmentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeparmentService_ServiceDesc.Streams[0], DeparmentService_GetDeparments_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &deparmentServiceGetDeparmentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeparmentService_GetDeparmentsClient interface {
	Recv() (*Deparment, error)
	grpc.ClientStream
}

type deparmentServiceGetDeparmentsClient struct {
	grpc.ClientStream
}

func (x *deparmentServiceGetDeparmentsClient) Recv() (*Deparment, error) {
	m := new(Deparment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deparmentServiceClient) UpdateDeparment(ctx context.Context, in *DeparmentUpdateRequest, opts ...grpc.CallOption) (*DeparmentResponse, error) {
	out := new(DeparmentResponse)
	err := c.cc.Invoke(ctx, DeparmentService_UpdateDeparment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deparmentServiceClient) DeleteDeparment(ctx context.Context, in *DeparmentRequest, opts ...grpc.CallOption) (*DeleteDeparmentResponse, error) {
	out := new(DeleteDeparmentResponse)
	err := c.cc.Invoke(ctx, DeparmentService_DeleteDeparment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deparmentServiceClient) GetDepartmentCount(ctx context.Context, in *GetDeparmentsRequest, opts ...grpc.CallOption) (*DepartmentCountResponse, error) {
	out := new(DepartmentCountResponse)
	err := c.cc.Invoke(ctx, DeparmentService_GetDepartmentCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeparmentServiceServer is the server API for DeparmentService service.
// All implementations must embed UnimplementedDeparmentServiceServer
// for forward compatibility
type DeparmentServiceServer interface {
	CreateDeparment(context.Context, *CreateDeparmentRequest) (*DeparmentResponse, error)
	GetDeparment(context.Context, *DeparmentRequest) (*DeparmentResponse, error)
	GetDeparments(*GetDeparmentsRequest, DeparmentService_GetDeparmentsServer) error
	UpdateDeparment(context.Context, *DeparmentUpdateRequest) (*DeparmentResponse, error)
	DeleteDeparment(context.Context, *DeparmentRequest) (*DeleteDeparmentResponse, error)
	GetDepartmentCount(context.Context, *GetDeparmentsRequest) (*DepartmentCountResponse, error)
	mustEmbedUnimplementedDeparmentServiceServer()
}

// UnimplementedDeparmentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeparmentServiceServer struct {
}

func (UnimplementedDeparmentServiceServer) CreateDeparment(context.Context, *CreateDeparmentRequest) (*DeparmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeparment not implemented")
}
func (UnimplementedDeparmentServiceServer) GetDeparment(context.Context, *DeparmentRequest) (*DeparmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeparment not implemented")
}
func (UnimplementedDeparmentServiceServer) GetDeparments(*GetDeparmentsRequest, DeparmentService_GetDeparmentsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDeparments not implemented")
}
func (UnimplementedDeparmentServiceServer) UpdateDeparment(context.Context, *DeparmentUpdateRequest) (*DeparmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeparment not implemented")
}
func (UnimplementedDeparmentServiceServer) DeleteDeparment(context.Context, *DeparmentRequest) (*DeleteDeparmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeparment not implemented")
}
func (UnimplementedDeparmentServiceServer) GetDepartmentCount(context.Context, *GetDeparmentsRequest) (*DepartmentCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartmentCount not implemented")
}
func (UnimplementedDeparmentServiceServer) mustEmbedUnimplementedDeparmentServiceServer() {}

// UnsafeDeparmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeparmentServiceServer will
// result in compilation errors.
type UnsafeDeparmentServiceServer interface {
	mustEmbedUnimplementedDeparmentServiceServer()
}

func RegisterDeparmentServiceServer(s grpc.ServiceRegistrar, srv DeparmentServiceServer) {
	s.RegisterService(&DeparmentService_ServiceDesc, srv)
}

func _DeparmentService_CreateDeparment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeparmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeparmentServiceServer).CreateDeparment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeparmentService_CreateDeparment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeparmentServiceServer).CreateDeparment(ctx, req.(*CreateDeparmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeparmentService_GetDeparment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeparmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeparmentServiceServer).GetDeparment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeparmentService_GetDeparment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeparmentServiceServer).GetDeparment(ctx, req.(*DeparmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeparmentService_GetDeparments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDeparmentsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeparmentServiceServer).GetDeparments(m, &deparmentServiceGetDeparmentsServer{stream})
}

type DeparmentService_GetDeparmentsServer interface {
	Send(*Deparment) error
	grpc.ServerStream
}

type deparmentServiceGetDeparmentsServer struct {
	grpc.ServerStream
}

func (x *deparmentServiceGetDeparmentsServer) Send(m *Deparment) error {
	return x.ServerStream.SendMsg(m)
}

func _DeparmentService_UpdateDeparment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeparmentUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeparmentServiceServer).UpdateDeparment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeparmentService_UpdateDeparment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeparmentServiceServer).UpdateDeparment(ctx, req.(*DeparmentUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeparmentService_DeleteDeparment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeparmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeparmentServiceServer).DeleteDeparment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeparmentService_DeleteDeparment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeparmentServiceServer).DeleteDeparment(ctx, req.(*DeparmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeparmentService_GetDepartmentCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeparmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeparmentServiceServer).GetDepartmentCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeparmentService_GetDepartmentCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeparmentServiceServer).GetDepartmentCount(ctx, req.(*GetDeparmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeparmentService_ServiceDesc is the grpc.ServiceDesc for DeparmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeparmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.DeparmentService",
	HandlerType: (*DeparmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDeparment",
			Handler:    _DeparmentService_CreateDeparment_Handler,
		},
		{
			MethodName: "GetDeparment",
			Handler:    _DeparmentService_GetDeparment_Handler,
		},
		{
			MethodName: "UpdateDeparment",
			Handler:    _DeparmentService_UpdateDeparment_Handler,
		},
		{
			MethodName: "DeleteDeparment",
			Handler:    _DeparmentService_DeleteDeparment_Handler,
		},
		{
			MethodName: "GetDepartmentCount",
			Handler:    _DeparmentService_GetDepartmentCount_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDeparments",
			Handler:       _DeparmentService_GetDeparments_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "deparment.proto",
}
