// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.2
// source: noti.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotiServiceClient is the client API for NotiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotiServiceClient interface {
	CreateNoti(ctx context.Context, in *CreateNotiRequest, opts ...grpc.CallOption) (*NotiResponse, error)
	GetNoti(ctx context.Context, in *NotiRequest, opts ...grpc.CallOption) (*NotiResponse, error)
	GetNotis(ctx context.Context, in *GetNotisRequest, opts ...grpc.CallOption) (NotiService_GetNotisClient, error)
	UpdateNoti(ctx context.Context, in *UpdateNotiRequest, opts ...grpc.CallOption) (*NotiResponse, error)
	DeleteNoti(ctx context.Context, in *NotiRequest, opts ...grpc.CallOption) (*DeleteNotiResponse, error)
	GetNotiByUserId(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (NotiService_GetNotiByUserIdClient, error)
	GetNotiCount(ctx context.Context, in *NotiRequestByUserId, opts ...grpc.CallOption) (*NotiCountResponse, error)
	MarkAllNotiAsRead(ctx context.Context, in *NotiRequestByUserId, opts ...grpc.CallOption) (*DeleteNotiResponse, error)
	GetNotiForUserSummary(ctx context.Context, in *NotiRequestByUserId, opts ...grpc.CallOption) (*NotiCountResponse, error)
}

type notiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotiServiceClient(cc grpc.ClientConnInterface) NotiServiceClient {
	return &notiServiceClient{cc}
}

func (c *notiServiceClient) CreateNoti(ctx context.Context, in *CreateNotiRequest, opts ...grpc.CallOption) (*NotiResponse, error) {
	out := new(NotiResponse)
	err := c.cc.Invoke(ctx, "/pb.NotiService/CreateNoti", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notiServiceClient) GetNoti(ctx context.Context, in *NotiRequest, opts ...grpc.CallOption) (*NotiResponse, error) {
	out := new(NotiResponse)
	err := c.cc.Invoke(ctx, "/pb.NotiService/GetNoti", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notiServiceClient) GetNotis(ctx context.Context, in *GetNotisRequest, opts ...grpc.CallOption) (NotiService_GetNotisClient, error) {
	stream, err := c.cc.NewStream(ctx, &NotiService_ServiceDesc.Streams[0], "/pb.NotiService/GetNotis", opts...)
	if err != nil {
		return nil, err
	}
	x := &notiServiceGetNotisClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NotiService_GetNotisClient interface {
	Recv() (*Noti, error)
	grpc.ClientStream
}

type notiServiceGetNotisClient struct {
	grpc.ClientStream
}

func (x *notiServiceGetNotisClient) Recv() (*Noti, error) {
	m := new(Noti)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *notiServiceClient) UpdateNoti(ctx context.Context, in *UpdateNotiRequest, opts ...grpc.CallOption) (*NotiResponse, error) {
	out := new(NotiResponse)
	err := c.cc.Invoke(ctx, "/pb.NotiService/UpdateNoti", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notiServiceClient) DeleteNoti(ctx context.Context, in *NotiRequest, opts ...grpc.CallOption) (*DeleteNotiResponse, error) {
	out := new(DeleteNotiResponse)
	err := c.cc.Invoke(ctx, "/pb.NotiService/DeleteNoti", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notiServiceClient) GetNotiByUserId(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (NotiService_GetNotiByUserIdClient, error) {
	stream, err := c.cc.NewStream(ctx, &NotiService_ServiceDesc.Streams[1], "/pb.NotiService/getNotiByUserId", opts...)
	if err != nil {
		return nil, err
	}
	x := &notiServiceGetNotiByUserIdClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NotiService_GetNotiByUserIdClient interface {
	Recv() (*Noti, error)
	grpc.ClientStream
}

type notiServiceGetNotiByUserIdClient struct {
	grpc.ClientStream
}

func (x *notiServiceGetNotiByUserIdClient) Recv() (*Noti, error) {
	m := new(Noti)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *notiServiceClient) GetNotiCount(ctx context.Context, in *NotiRequestByUserId, opts ...grpc.CallOption) (*NotiCountResponse, error) {
	out := new(NotiCountResponse)
	err := c.cc.Invoke(ctx, "/pb.NotiService/GetNotiCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notiServiceClient) MarkAllNotiAsRead(ctx context.Context, in *NotiRequestByUserId, opts ...grpc.CallOption) (*DeleteNotiResponse, error) {
	out := new(DeleteNotiResponse)
	err := c.cc.Invoke(ctx, "/pb.NotiService/MarkAllNotiAsRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notiServiceClient) GetNotiForUserSummary(ctx context.Context, in *NotiRequestByUserId, opts ...grpc.CallOption) (*NotiCountResponse, error) {
	out := new(NotiCountResponse)
	err := c.cc.Invoke(ctx, "/pb.NotiService/GetNotiForUserSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotiServiceServer is the server API for NotiService service.
// All implementations must embed UnimplementedNotiServiceServer
// for forward compatibility
type NotiServiceServer interface {
	CreateNoti(context.Context, *CreateNotiRequest) (*NotiResponse, error)
	GetNoti(context.Context, *NotiRequest) (*NotiResponse, error)
	GetNotis(*GetNotisRequest, NotiService_GetNotisServer) error
	UpdateNoti(context.Context, *UpdateNotiRequest) (*NotiResponse, error)
	DeleteNoti(context.Context, *NotiRequest) (*DeleteNotiResponse, error)
	GetNotiByUserId(*UserIdRequest, NotiService_GetNotiByUserIdServer) error
	GetNotiCount(context.Context, *NotiRequestByUserId) (*NotiCountResponse, error)
	MarkAllNotiAsRead(context.Context, *NotiRequestByUserId) (*DeleteNotiResponse, error)
	GetNotiForUserSummary(context.Context, *NotiRequestByUserId) (*NotiCountResponse, error)
	mustEmbedUnimplementedNotiServiceServer()
}

// UnimplementedNotiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNotiServiceServer struct {
}

func (UnimplementedNotiServiceServer) CreateNoti(context.Context, *CreateNotiRequest) (*NotiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNoti not implemented")
}
func (UnimplementedNotiServiceServer) GetNoti(context.Context, *NotiRequest) (*NotiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNoti not implemented")
}
func (UnimplementedNotiServiceServer) GetNotis(*GetNotisRequest, NotiService_GetNotisServer) error {
	return status.Errorf(codes.Unimplemented, "method GetNotis not implemented")
}
func (UnimplementedNotiServiceServer) UpdateNoti(context.Context, *UpdateNotiRequest) (*NotiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNoti not implemented")
}
func (UnimplementedNotiServiceServer) DeleteNoti(context.Context, *NotiRequest) (*DeleteNotiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNoti not implemented")
}
func (UnimplementedNotiServiceServer) GetNotiByUserId(*UserIdRequest, NotiService_GetNotiByUserIdServer) error {
	return status.Errorf(codes.Unimplemented, "method GetNotiByUserId not implemented")
}
func (UnimplementedNotiServiceServer) GetNotiCount(context.Context, *NotiRequestByUserId) (*NotiCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotiCount not implemented")
}
func (UnimplementedNotiServiceServer) MarkAllNotiAsRead(context.Context, *NotiRequestByUserId) (*DeleteNotiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkAllNotiAsRead not implemented")
}
func (UnimplementedNotiServiceServer) GetNotiForUserSummary(context.Context, *NotiRequestByUserId) (*NotiCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotiForUserSummary not implemented")
}
func (UnimplementedNotiServiceServer) mustEmbedUnimplementedNotiServiceServer() {}

// UnsafeNotiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotiServiceServer will
// result in compilation errors.
type UnsafeNotiServiceServer interface {
	mustEmbedUnimplementedNotiServiceServer()
}

func RegisterNotiServiceServer(s grpc.ServiceRegistrar, srv NotiServiceServer) {
	s.RegisterService(&NotiService_ServiceDesc, srv)
}

func _NotiService_CreateNoti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotiServiceServer).CreateNoti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NotiService/CreateNoti",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotiServiceServer).CreateNoti(ctx, req.(*CreateNotiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotiService_GetNoti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotiServiceServer).GetNoti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NotiService/GetNoti",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotiServiceServer).GetNoti(ctx, req.(*NotiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotiService_GetNotis_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetNotisRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotiServiceServer).GetNotis(m, &notiServiceGetNotisServer{stream})
}

type NotiService_GetNotisServer interface {
	Send(*Noti) error
	grpc.ServerStream
}

type notiServiceGetNotisServer struct {
	grpc.ServerStream
}

func (x *notiServiceGetNotisServer) Send(m *Noti) error {
	return x.ServerStream.SendMsg(m)
}

func _NotiService_UpdateNoti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotiServiceServer).UpdateNoti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NotiService/UpdateNoti",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotiServiceServer).UpdateNoti(ctx, req.(*UpdateNotiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotiService_DeleteNoti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotiServiceServer).DeleteNoti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NotiService/DeleteNoti",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotiServiceServer).DeleteNoti(ctx, req.(*NotiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotiService_GetNotiByUserId_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserIdRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotiServiceServer).GetNotiByUserId(m, &notiServiceGetNotiByUserIdServer{stream})
}

type NotiService_GetNotiByUserIdServer interface {
	Send(*Noti) error
	grpc.ServerStream
}

type notiServiceGetNotiByUserIdServer struct {
	grpc.ServerStream
}

func (x *notiServiceGetNotiByUserIdServer) Send(m *Noti) error {
	return x.ServerStream.SendMsg(m)
}

func _NotiService_GetNotiCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotiRequestByUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotiServiceServer).GetNotiCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NotiService/GetNotiCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotiServiceServer).GetNotiCount(ctx, req.(*NotiRequestByUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotiService_MarkAllNotiAsRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotiRequestByUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotiServiceServer).MarkAllNotiAsRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NotiService/MarkAllNotiAsRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotiServiceServer).MarkAllNotiAsRead(ctx, req.(*NotiRequestByUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotiService_GetNotiForUserSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotiRequestByUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotiServiceServer).GetNotiForUserSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NotiService/GetNotiForUserSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotiServiceServer).GetNotiForUserSummary(ctx, req.(*NotiRequestByUserId))
	}
	return interceptor(ctx, in, info, handler)
}

// NotiService_ServiceDesc is the grpc.ServiceDesc for NotiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.NotiService",
	HandlerType: (*NotiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNoti",
			Handler:    _NotiService_CreateNoti_Handler,
		},
		{
			MethodName: "GetNoti",
			Handler:    _NotiService_GetNoti_Handler,
		},
		{
			MethodName: "UpdateNoti",
			Handler:    _NotiService_UpdateNoti_Handler,
		},
		{
			MethodName: "DeleteNoti",
			Handler:    _NotiService_DeleteNoti_Handler,
		},
		{
			MethodName: "GetNotiCount",
			Handler:    _NotiService_GetNotiCount_Handler,
		},
		{
			MethodName: "MarkAllNotiAsRead",
			Handler:    _NotiService_MarkAllNotiAsRead_Handler,
		},
		{
			MethodName: "GetNotiForUserSummary",
			Handler:    _NotiService_GetNotiForUserSummary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetNotis",
			Handler:       _NotiService_GetNotis_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getNotiByUserId",
			Handler:       _NotiService_GetNotiByUserId_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "noti.proto",
}
