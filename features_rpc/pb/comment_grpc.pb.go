// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: comment.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CommentService_CreateComment_FullMethodName                     = "/pb.CommentService/CreateComment"
	CommentService_GetComments_FullMethodName                       = "/pb.CommentService/GetComments"
	CommentService_GetComment_FullMethodName                        = "/pb.CommentService/GetComment"
	CommentService_UpdateComment_FullMethodName                     = "/pb.CommentService/UpdateComment"
	CommentService_DeleteComment_FullMethodName                     = "/pb.CommentService/DeleteComment"
	CommentService_GetCommentByQuestionId_FullMethodName            = "/pb.CommentService/GetCommentByQuestionId"
	CommentService_GetCommentsByUserId_FullMethodName               = "/pb.CommentService/GetCommentsByUserId"
	CommentService_GetAnswersByUserId_FullMethodName                = "/pb.CommentService/GetAnswersByUserId"
	CommentService_GetCommentsByUserIdWithSolved_FullMethodName     = "/pb.CommentService/GetCommentsByUserIdWithSolved"
	CommentService_GetCommentCount_FullMethodName                   = "/pb.CommentService/GetCommentCount"
	CommentService_GetCommentCountBySolved_FullMethodName           = "/pb.CommentService/GetCommentCountBySolved"
	CommentService_GetCommentCountByQuestionIdSolved_FullMethodName = "/pb.CommentService/GetCommentCountByQuestionIdSolved"
)

// CommentServiceClient is the client API for CommentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentServiceClient interface {
	CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CommentResponse, error)
	GetComments(ctx context.Context, in *GetCommentsRequest, opts ...grpc.CallOption) (CommentService_GetCommentsClient, error)
	GetComment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*CommentResponse, error)
	UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*CommentResponse, error)
	DeleteComment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error)
	GetCommentByQuestionId(ctx context.Context, in *QuestionIdRequest, opts ...grpc.CallOption) (CommentService_GetCommentByQuestionIdClient, error)
	GetCommentsByUserId(ctx context.Context, in *CommentResquestByUserId, opts ...grpc.CallOption) (CommentService_GetCommentsByUserIdClient, error)
	GetAnswersByUserId(ctx context.Context, in *CommentResquestByUserId, opts ...grpc.CallOption) (CommentService_GetAnswersByUserIdClient, error)
	GetCommentsByUserIdWithSolved(ctx context.Context, in *CommentResquestByUserId, opts ...grpc.CallOption) (CommentService_GetCommentsByUserIdWithSolvedClient, error)
	GetCommentCount(ctx context.Context, in *CommentResquestByUserId, opts ...grpc.CallOption) (*CommentCountResponse, error)
	GetCommentCountBySolved(ctx context.Context, in *CommentResquestByUserId, opts ...grpc.CallOption) (*CommentCountResponse, error)
	GetCommentCountByQuestionIdSolved(ctx context.Context, in *QuestionIdRequest, opts ...grpc.CallOption) (*CommentCountResponse, error)
}

type commentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentServiceClient(cc grpc.ClientConnInterface) CommentServiceClient {
	return &commentServiceClient{cc}
}

func (c *commentServiceClient) CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CommentResponse, error) {
	out := new(CommentResponse)
	err := c.cc.Invoke(ctx, CommentService_CreateComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) GetComments(ctx context.Context, in *GetCommentsRequest, opts ...grpc.CallOption) (CommentService_GetCommentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CommentService_ServiceDesc.Streams[0], CommentService_GetComments_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &commentServiceGetCommentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CommentService_GetCommentsClient interface {
	Recv() (*Comment, error)
	grpc.ClientStream
}

type commentServiceGetCommentsClient struct {
	grpc.ClientStream
}

func (x *commentServiceGetCommentsClient) Recv() (*Comment, error) {
	m := new(Comment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *commentServiceClient) GetComment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*CommentResponse, error) {
	out := new(CommentResponse)
	err := c.cc.Invoke(ctx, CommentService_GetComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*CommentResponse, error) {
	out := new(CommentResponse)
	err := c.cc.Invoke(ctx, CommentService_UpdateComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) DeleteComment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error) {
	out := new(DeleteCommentResponse)
	err := c.cc.Invoke(ctx, CommentService_DeleteComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) GetCommentByQuestionId(ctx context.Context, in *QuestionIdRequest, opts ...grpc.CallOption) (CommentService_GetCommentByQuestionIdClient, error) {
	stream, err := c.cc.NewStream(ctx, &CommentService_ServiceDesc.Streams[1], CommentService_GetCommentByQuestionId_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &commentServiceGetCommentByQuestionIdClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CommentService_GetCommentByQuestionIdClient interface {
	Recv() (*Comment, error)
	grpc.ClientStream
}

type commentServiceGetCommentByQuestionIdClient struct {
	grpc.ClientStream
}

func (x *commentServiceGetCommentByQuestionIdClient) Recv() (*Comment, error) {
	m := new(Comment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *commentServiceClient) GetCommentsByUserId(ctx context.Context, in *CommentResquestByUserId, opts ...grpc.CallOption) (CommentService_GetCommentsByUserIdClient, error) {
	stream, err := c.cc.NewStream(ctx, &CommentService_ServiceDesc.Streams[2], CommentService_GetCommentsByUserId_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &commentServiceGetCommentsByUserIdClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CommentService_GetCommentsByUserIdClient interface {
	Recv() (*Comment, error)
	grpc.ClientStream
}

type commentServiceGetCommentsByUserIdClient struct {
	grpc.ClientStream
}

func (x *commentServiceGetCommentsByUserIdClient) Recv() (*Comment, error) {
	m := new(Comment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *commentServiceClient) GetAnswersByUserId(ctx context.Context, in *CommentResquestByUserId, opts ...grpc.CallOption) (CommentService_GetAnswersByUserIdClient, error) {
	stream, err := c.cc.NewStream(ctx, &CommentService_ServiceDesc.Streams[3], CommentService_GetAnswersByUserId_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &commentServiceGetAnswersByUserIdClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CommentService_GetAnswersByUserIdClient interface {
	Recv() (*Comment, error)
	grpc.ClientStream
}

type commentServiceGetAnswersByUserIdClient struct {
	grpc.ClientStream
}

func (x *commentServiceGetAnswersByUserIdClient) Recv() (*Comment, error) {
	m := new(Comment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *commentServiceClient) GetCommentsByUserIdWithSolved(ctx context.Context, in *CommentResquestByUserId, opts ...grpc.CallOption) (CommentService_GetCommentsByUserIdWithSolvedClient, error) {
	stream, err := c.cc.NewStream(ctx, &CommentService_ServiceDesc.Streams[4], CommentService_GetCommentsByUserIdWithSolved_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &commentServiceGetCommentsByUserIdWithSolvedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CommentService_GetCommentsByUserIdWithSolvedClient interface {
	Recv() (*Comment, error)
	grpc.ClientStream
}

type commentServiceGetCommentsByUserIdWithSolvedClient struct {
	grpc.ClientStream
}

func (x *commentServiceGetCommentsByUserIdWithSolvedClient) Recv() (*Comment, error) {
	m := new(Comment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *commentServiceClient) GetCommentCount(ctx context.Context, in *CommentResquestByUserId, opts ...grpc.CallOption) (*CommentCountResponse, error) {
	out := new(CommentCountResponse)
	err := c.cc.Invoke(ctx, CommentService_GetCommentCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) GetCommentCountBySolved(ctx context.Context, in *CommentResquestByUserId, opts ...grpc.CallOption) (*CommentCountResponse, error) {
	out := new(CommentCountResponse)
	err := c.cc.Invoke(ctx, CommentService_GetCommentCountBySolved_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) GetCommentCountByQuestionIdSolved(ctx context.Context, in *QuestionIdRequest, opts ...grpc.CallOption) (*CommentCountResponse, error) {
	out := new(CommentCountResponse)
	err := c.cc.Invoke(ctx, CommentService_GetCommentCountByQuestionIdSolved_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentServiceServer is the server API for CommentService service.
// All implementations must embed UnimplementedCommentServiceServer
// for forward compatibility
type CommentServiceServer interface {
	CreateComment(context.Context, *CreateCommentRequest) (*CommentResponse, error)
	GetComments(*GetCommentsRequest, CommentService_GetCommentsServer) error
	GetComment(context.Context, *CommentRequest) (*CommentResponse, error)
	UpdateComment(context.Context, *UpdateCommentRequest) (*CommentResponse, error)
	DeleteComment(context.Context, *CommentRequest) (*DeleteCommentResponse, error)
	GetCommentByQuestionId(*QuestionIdRequest, CommentService_GetCommentByQuestionIdServer) error
	GetCommentsByUserId(*CommentResquestByUserId, CommentService_GetCommentsByUserIdServer) error
	GetAnswersByUserId(*CommentResquestByUserId, CommentService_GetAnswersByUserIdServer) error
	GetCommentsByUserIdWithSolved(*CommentResquestByUserId, CommentService_GetCommentsByUserIdWithSolvedServer) error
	GetCommentCount(context.Context, *CommentResquestByUserId) (*CommentCountResponse, error)
	GetCommentCountBySolved(context.Context, *CommentResquestByUserId) (*CommentCountResponse, error)
	GetCommentCountByQuestionIdSolved(context.Context, *QuestionIdRequest) (*CommentCountResponse, error)
	mustEmbedUnimplementedCommentServiceServer()
}

// UnimplementedCommentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommentServiceServer struct {
}

func (UnimplementedCommentServiceServer) CreateComment(context.Context, *CreateCommentRequest) (*CommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedCommentServiceServer) GetComments(*GetCommentsRequest, CommentService_GetCommentsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetComments not implemented")
}
func (UnimplementedCommentServiceServer) GetComment(context.Context, *CommentRequest) (*CommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComment not implemented")
}
func (UnimplementedCommentServiceServer) UpdateComment(context.Context, *UpdateCommentRequest) (*CommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}
func (UnimplementedCommentServiceServer) DeleteComment(context.Context, *CommentRequest) (*DeleteCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedCommentServiceServer) GetCommentByQuestionId(*QuestionIdRequest, CommentService_GetCommentByQuestionIdServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCommentByQuestionId not implemented")
}
func (UnimplementedCommentServiceServer) GetCommentsByUserId(*CommentResquestByUserId, CommentService_GetCommentsByUserIdServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCommentsByUserId not implemented")
}
func (UnimplementedCommentServiceServer) GetAnswersByUserId(*CommentResquestByUserId, CommentService_GetAnswersByUserIdServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAnswersByUserId not implemented")
}
func (UnimplementedCommentServiceServer) GetCommentsByUserIdWithSolved(*CommentResquestByUserId, CommentService_GetCommentsByUserIdWithSolvedServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCommentsByUserIdWithSolved not implemented")
}
func (UnimplementedCommentServiceServer) GetCommentCount(context.Context, *CommentResquestByUserId) (*CommentCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentCount not implemented")
}
func (UnimplementedCommentServiceServer) GetCommentCountBySolved(context.Context, *CommentResquestByUserId) (*CommentCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentCountBySolved not implemented")
}
func (UnimplementedCommentServiceServer) GetCommentCountByQuestionIdSolved(context.Context, *QuestionIdRequest) (*CommentCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentCountByQuestionIdSolved not implemented")
}
func (UnimplementedCommentServiceServer) mustEmbedUnimplementedCommentServiceServer() {}

// UnsafeCommentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentServiceServer will
// result in compilation errors.
type UnsafeCommentServiceServer interface {
	mustEmbedUnimplementedCommentServiceServer()
}

func RegisterCommentServiceServer(s grpc.ServiceRegistrar, srv CommentServiceServer) {
	s.RegisterService(&CommentService_ServiceDesc, srv)
}

func _CommentService_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_CreateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).CreateComment(ctx, req.(*CreateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_GetComments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetCommentsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommentServiceServer).GetComments(m, &commentServiceGetCommentsServer{stream})
}

type CommentService_GetCommentsServer interface {
	Send(*Comment) error
	grpc.ServerStream
}

type commentServiceGetCommentsServer struct {
	grpc.ServerStream
}

func (x *commentServiceGetCommentsServer) Send(m *Comment) error {
	return x.ServerStream.SendMsg(m)
}

func _CommentService_GetComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).GetComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_GetComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).GetComment(ctx, req.(*CommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_UpdateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).UpdateComment(ctx, req.(*UpdateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).DeleteComment(ctx, req.(*CommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_GetCommentByQuestionId_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QuestionIdRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommentServiceServer).GetCommentByQuestionId(m, &commentServiceGetCommentByQuestionIdServer{stream})
}

type CommentService_GetCommentByQuestionIdServer interface {
	Send(*Comment) error
	grpc.ServerStream
}

type commentServiceGetCommentByQuestionIdServer struct {
	grpc.ServerStream
}

func (x *commentServiceGetCommentByQuestionIdServer) Send(m *Comment) error {
	return x.ServerStream.SendMsg(m)
}

func _CommentService_GetCommentsByUserId_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CommentResquestByUserId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommentServiceServer).GetCommentsByUserId(m, &commentServiceGetCommentsByUserIdServer{stream})
}

type CommentService_GetCommentsByUserIdServer interface {
	Send(*Comment) error
	grpc.ServerStream
}

type commentServiceGetCommentsByUserIdServer struct {
	grpc.ServerStream
}

func (x *commentServiceGetCommentsByUserIdServer) Send(m *Comment) error {
	return x.ServerStream.SendMsg(m)
}

func _CommentService_GetAnswersByUserId_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CommentResquestByUserId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommentServiceServer).GetAnswersByUserId(m, &commentServiceGetAnswersByUserIdServer{stream})
}

type CommentService_GetAnswersByUserIdServer interface {
	Send(*Comment) error
	grpc.ServerStream
}

type commentServiceGetAnswersByUserIdServer struct {
	grpc.ServerStream
}

func (x *commentServiceGetAnswersByUserIdServer) Send(m *Comment) error {
	return x.ServerStream.SendMsg(m)
}

func _CommentService_GetCommentsByUserIdWithSolved_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CommentResquestByUserId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommentServiceServer).GetCommentsByUserIdWithSolved(m, &commentServiceGetCommentsByUserIdWithSolvedServer{stream})
}

type CommentService_GetCommentsByUserIdWithSolvedServer interface {
	Send(*Comment) error
	grpc.ServerStream
}

type commentServiceGetCommentsByUserIdWithSolvedServer struct {
	grpc.ServerStream
}

func (x *commentServiceGetCommentsByUserIdWithSolvedServer) Send(m *Comment) error {
	return x.ServerStream.SendMsg(m)
}

func _CommentService_GetCommentCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentResquestByUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).GetCommentCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_GetCommentCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).GetCommentCount(ctx, req.(*CommentResquestByUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_GetCommentCountBySolved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentResquestByUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).GetCommentCountBySolved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_GetCommentCountBySolved_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).GetCommentCountBySolved(ctx, req.(*CommentResquestByUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_GetCommentCountByQuestionIdSolved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).GetCommentCountByQuestionIdSolved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_GetCommentCountByQuestionIdSolved_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).GetCommentCountByQuestionIdSolved(ctx, req.(*QuestionIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentService_ServiceDesc is the grpc.ServiceDesc for CommentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CommentService",
	HandlerType: (*CommentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateComment",
			Handler:    _CommentService_CreateComment_Handler,
		},
		{
			MethodName: "GetComment",
			Handler:    _CommentService_GetComment_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _CommentService_UpdateComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _CommentService_DeleteComment_Handler,
		},
		{
			MethodName: "GetCommentCount",
			Handler:    _CommentService_GetCommentCount_Handler,
		},
		{
			MethodName: "GetCommentCountBySolved",
			Handler:    _CommentService_GetCommentCountBySolved_Handler,
		},
		{
			MethodName: "GetCommentCountByQuestionIdSolved",
			Handler:    _CommentService_GetCommentCountByQuestionIdSolved_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetComments",
			Handler:       _CommentService_GetComments_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetCommentByQuestionId",
			Handler:       _CommentService_GetCommentByQuestionId_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetCommentsByUserId",
			Handler:       _CommentService_GetCommentsByUserId_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAnswersByUserId",
			Handler:       _CommentService_GetAnswersByUserId_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetCommentsByUserIdWithSolved",
			Handler:       _CommentService_GetCommentsByUserIdWithSolved_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "comment.proto",
}
