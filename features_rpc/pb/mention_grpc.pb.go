// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: mention.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MentionService_CreateMention_FullMethodName       = "/pb.MentionService/CreateMention"
	MentionService_GetMentions_FullMethodName         = "/pb.MentionService/GetMentions"
	MentionService_GetMention_FullMethodName          = "/pb.MentionService/GetMention"
	MentionService_UpdateMention_FullMethodName       = "/pb.MentionService/UpdateMention"
	MentionService_DeleteMention_FullMethodName       = "/pb.MentionService/DeleteMention"
	MentionService_GetMentionsByUserId_FullMethodName = "/pb.MentionService/GetMentionsByUserId"
	MentionService_GetMentionCount_FullMethodName     = "/pb.MentionService/GetMentionCount"
)

// MentionServiceClient is the client API for MentionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MentionServiceClient interface {
	CreateMention(ctx context.Context, in *CreateMentionRequest, opts ...grpc.CallOption) (*MentionResponse, error)
	GetMentions(ctx context.Context, in *GetMentionsRequest, opts ...grpc.CallOption) (MentionService_GetMentionsClient, error)
	GetMention(ctx context.Context, in *MentionRequest, opts ...grpc.CallOption) (*MentionResponse, error)
	UpdateMention(ctx context.Context, in *UpdateMentionRequest, opts ...grpc.CallOption) (*MentionResponse, error)
	DeleteMention(ctx context.Context, in *MentionRequest, opts ...grpc.CallOption) (*DeleteMentionResponse, error)
	GetMentionsByUserId(ctx context.Context, in *MentionRequestByUserId, opts ...grpc.CallOption) (MentionService_GetMentionsByUserIdClient, error)
	GetMentionCount(ctx context.Context, in *MentionRequestByUserId, opts ...grpc.CallOption) (*MentionCountResponse, error)
}

type mentionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMentionServiceClient(cc grpc.ClientConnInterface) MentionServiceClient {
	return &mentionServiceClient{cc}
}

func (c *mentionServiceClient) CreateMention(ctx context.Context, in *CreateMentionRequest, opts ...grpc.CallOption) (*MentionResponse, error) {
	out := new(MentionResponse)
	err := c.cc.Invoke(ctx, MentionService_CreateMention_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mentionServiceClient) GetMentions(ctx context.Context, in *GetMentionsRequest, opts ...grpc.CallOption) (MentionService_GetMentionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &MentionService_ServiceDesc.Streams[0], MentionService_GetMentions_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &mentionServiceGetMentionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MentionService_GetMentionsClient interface {
	Recv() (*Mention, error)
	grpc.ClientStream
}

type mentionServiceGetMentionsClient struct {
	grpc.ClientStream
}

func (x *mentionServiceGetMentionsClient) Recv() (*Mention, error) {
	m := new(Mention)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mentionServiceClient) GetMention(ctx context.Context, in *MentionRequest, opts ...grpc.CallOption) (*MentionResponse, error) {
	out := new(MentionResponse)
	err := c.cc.Invoke(ctx, MentionService_GetMention_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mentionServiceClient) UpdateMention(ctx context.Context, in *UpdateMentionRequest, opts ...grpc.CallOption) (*MentionResponse, error) {
	out := new(MentionResponse)
	err := c.cc.Invoke(ctx, MentionService_UpdateMention_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mentionServiceClient) DeleteMention(ctx context.Context, in *MentionRequest, opts ...grpc.CallOption) (*DeleteMentionResponse, error) {
	out := new(DeleteMentionResponse)
	err := c.cc.Invoke(ctx, MentionService_DeleteMention_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mentionServiceClient) GetMentionsByUserId(ctx context.Context, in *MentionRequestByUserId, opts ...grpc.CallOption) (MentionService_GetMentionsByUserIdClient, error) {
	stream, err := c.cc.NewStream(ctx, &MentionService_ServiceDesc.Streams[1], MentionService_GetMentionsByUserId_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &mentionServiceGetMentionsByUserIdClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MentionService_GetMentionsByUserIdClient interface {
	Recv() (*Mention, error)
	grpc.ClientStream
}

type mentionServiceGetMentionsByUserIdClient struct {
	grpc.ClientStream
}

func (x *mentionServiceGetMentionsByUserIdClient) Recv() (*Mention, error) {
	m := new(Mention)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mentionServiceClient) GetMentionCount(ctx context.Context, in *MentionRequestByUserId, opts ...grpc.CallOption) (*MentionCountResponse, error) {
	out := new(MentionCountResponse)
	err := c.cc.Invoke(ctx, MentionService_GetMentionCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MentionServiceServer is the server API for MentionService service.
// All implementations must embed UnimplementedMentionServiceServer
// for forward compatibility
type MentionServiceServer interface {
	CreateMention(context.Context, *CreateMentionRequest) (*MentionResponse, error)
	GetMentions(*GetMentionsRequest, MentionService_GetMentionsServer) error
	GetMention(context.Context, *MentionRequest) (*MentionResponse, error)
	UpdateMention(context.Context, *UpdateMentionRequest) (*MentionResponse, error)
	DeleteMention(context.Context, *MentionRequest) (*DeleteMentionResponse, error)
	GetMentionsByUserId(*MentionRequestByUserId, MentionService_GetMentionsByUserIdServer) error
	GetMentionCount(context.Context, *MentionRequestByUserId) (*MentionCountResponse, error)
	mustEmbedUnimplementedMentionServiceServer()
}

// UnimplementedMentionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMentionServiceServer struct {
}

func (UnimplementedMentionServiceServer) CreateMention(context.Context, *CreateMentionRequest) (*MentionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMention not implemented")
}
func (UnimplementedMentionServiceServer) GetMentions(*GetMentionsRequest, MentionService_GetMentionsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMentions not implemented")
}
func (UnimplementedMentionServiceServer) GetMention(context.Context, *MentionRequest) (*MentionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMention not implemented")
}
func (UnimplementedMentionServiceServer) UpdateMention(context.Context, *UpdateMentionRequest) (*MentionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMention not implemented")
}
func (UnimplementedMentionServiceServer) DeleteMention(context.Context, *MentionRequest) (*DeleteMentionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMention not implemented")
}
func (UnimplementedMentionServiceServer) GetMentionsByUserId(*MentionRequestByUserId, MentionService_GetMentionsByUserIdServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMentionsByUserId not implemented")
}
func (UnimplementedMentionServiceServer) GetMentionCount(context.Context, *MentionRequestByUserId) (*MentionCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMentionCount not implemented")
}
func (UnimplementedMentionServiceServer) mustEmbedUnimplementedMentionServiceServer() {}

// UnsafeMentionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MentionServiceServer will
// result in compilation errors.
type UnsafeMentionServiceServer interface {
	mustEmbedUnimplementedMentionServiceServer()
}

func RegisterMentionServiceServer(s grpc.ServiceRegistrar, srv MentionServiceServer) {
	s.RegisterService(&MentionService_ServiceDesc, srv)
}

func _MentionService_CreateMention_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMentionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MentionServiceServer).CreateMention(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MentionService_CreateMention_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MentionServiceServer).CreateMention(ctx, req.(*CreateMentionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MentionService_GetMentions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMentionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MentionServiceServer).GetMentions(m, &mentionServiceGetMentionsServer{stream})
}

type MentionService_GetMentionsServer interface {
	Send(*Mention) error
	grpc.ServerStream
}

type mentionServiceGetMentionsServer struct {
	grpc.ServerStream
}

func (x *mentionServiceGetMentionsServer) Send(m *Mention) error {
	return x.ServerStream.SendMsg(m)
}

func _MentionService_GetMention_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MentionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MentionServiceServer).GetMention(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MentionService_GetMention_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MentionServiceServer).GetMention(ctx, req.(*MentionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MentionService_UpdateMention_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMentionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MentionServiceServer).UpdateMention(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MentionService_UpdateMention_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MentionServiceServer).UpdateMention(ctx, req.(*UpdateMentionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MentionService_DeleteMention_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MentionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MentionServiceServer).DeleteMention(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MentionService_DeleteMention_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MentionServiceServer).DeleteMention(ctx, req.(*MentionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MentionService_GetMentionsByUserId_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MentionRequestByUserId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MentionServiceServer).GetMentionsByUserId(m, &mentionServiceGetMentionsByUserIdServer{stream})
}

type MentionService_GetMentionsByUserIdServer interface {
	Send(*Mention) error
	grpc.ServerStream
}

type mentionServiceGetMentionsByUserIdServer struct {
	grpc.ServerStream
}

func (x *mentionServiceGetMentionsByUserIdServer) Send(m *Mention) error {
	return x.ServerStream.SendMsg(m)
}

func _MentionService_GetMentionCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MentionRequestByUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MentionServiceServer).GetMentionCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MentionService_GetMentionCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MentionServiceServer).GetMentionCount(ctx, req.(*MentionRequestByUserId))
	}
	return interceptor(ctx, in, info, handler)
}

// MentionService_ServiceDesc is the grpc.ServiceDesc for MentionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MentionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MentionService",
	HandlerType: (*MentionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMention",
			Handler:    _MentionService_CreateMention_Handler,
		},
		{
			MethodName: "GetMention",
			Handler:    _MentionService_GetMention_Handler,
		},
		{
			MethodName: "UpdateMention",
			Handler:    _MentionService_UpdateMention_Handler,
		},
		{
			MethodName: "DeleteMention",
			Handler:    _MentionService_DeleteMention_Handler,
		},
		{
			MethodName: "GetMentionCount",
			Handler:    _MentionService_GetMentionCount_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMentions",
			Handler:       _MentionService_GetMentions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetMentionsByUserId",
			Handler:       _MentionService_GetMentionsByUserId_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mention.proto",
}
